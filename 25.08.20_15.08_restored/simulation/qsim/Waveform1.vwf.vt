// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/25/2020 16:44:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          square_object
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module square_object_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [10:0] pixelX;
reg [10:0] pixelY;
reg resetN;
// wires                                               
wire [1:0] Tile_type;
wire [10:0] offsetX;
wire [10:0] offsetY;

// assign statements (if any)                          
square_object i1 (
// port map - connection between master ports and signals/registers   
	.Tile_type(Tile_type),
	.clk(clk),
	.offsetX(offsetX),
	.offsetY(offsetY),
	.pixelX(pixelX),
	.pixelY(pixelY),
	.resetN(resetN)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// pixelX[ 10 ]
initial
begin
	pixelX[10] = 1'b0;
end 
// pixelX[ 9 ]
initial
begin
	pixelX[9] = 1'b0;
end 
// pixelX[ 8 ]
initial
begin
	pixelX[8] = 1'b0;
end 
// pixelX[ 7 ]
initial
begin
	pixelX[7] = 1'b0;
	pixelX[7] = #60000 1'b1;
	pixelX[7] = #50000 1'b0;
	pixelX[7] = #20000 1'b1;
	pixelX[7] = #40000 1'b0;
end 
// pixelX[ 6 ]
initial
begin
	pixelX[6] = 1'b1;
	pixelX[6] = #50000 1'b0;
	pixelX[6] = #10000 1'b1;
	pixelX[6] = #50000 1'b0;
	pixelX[6] = #20000 1'b1;
	pixelX[6] = #40000 1'b0;
end 
// pixelX[ 5 ]
initial
begin
	pixelX[5] = 1'b1;
	pixelX[5] = #50000 1'b0;
	pixelX[5] = #80000 1'b1;
	pixelX[5] = #40000 1'b0;
end 
// pixelX[ 4 ]
initial
begin
	pixelX[4] = 1'b0;
	pixelX[4] = #130000 1'b1;
	pixelX[4] = #40000 1'b0;
end 
// pixelX[ 3 ]
initial
begin
	pixelX[3] = 1'b0;
	pixelX[3] = #60000 1'b1;
	pixelX[3] = #50000 1'b0;
end 
// pixelX[ 2 ]
initial
begin
	pixelX[2] = 1'b1;
	pixelX[2] = #50000 1'b0;
	pixelX[2] = #80000 1'b1;
	pixelX[2] = #40000 1'b0;
	pixelX[2] = #90000 1'b1;
	pixelX[2] = #50000 1'b0;
end 
// pixelX[ 1 ]
initial
begin
	pixelX[1] = 1'b0;
end 
// pixelX[ 0 ]
initial
begin
	pixelX[0] = 1'b0;
	pixelX[0] = #130000 1'b1;
	pixelX[0] = #40000 1'b0;
end 
// pixelY[ 10 ]
initial
begin
	pixelY[10] = 1'b0;
end 
// pixelY[ 9 ]
initial
begin
	pixelY[9] = 1'b0;
end 
// pixelY[ 8 ]
initial
begin
	pixelY[8] = 1'b0;
end 
// pixelY[ 7 ]
initial
begin
	pixelY[7] = 1'b0;
	pixelY[7] = #60000 1'b1;
	pixelY[7] = #50000 1'b0;
	pixelY[7] = #70000 1'b1;
	pixelY[7] = #60000 1'b0;
end 
// pixelY[ 6 ]
initial
begin
	pixelY[6] = 1'b1;
	pixelY[6] = #50000 1'b0;
	pixelY[6] = #10000 1'b1;
	pixelY[6] = #50000 1'b0;
	pixelY[6] = #20000 1'b1;
	pixelY[6] = #40000 1'b0;
	pixelY[6] = #10000 1'b1;
	pixelY[6] = #60000 1'b0;
end 
// pixelY[ 5 ]
initial
begin
	pixelY[5] = 1'b1;
	pixelY[5] = #50000 1'b0;
	pixelY[5] = #80000 1'b1;
	pixelY[5] = #40000 1'b0;
	pixelY[5] = #10000 1'b1;
	pixelY[5] = #60000 1'b0;
end 
// pixelY[ 4 ]
initial
begin
	pixelY[4] = 1'b0;
	pixelY[4] = #130000 1'b1;
	pixelY[4] = #40000 1'b0;
	pixelY[4] = #10000 1'b1;
	pixelY[4] = #60000 1'b0;
end 
// pixelY[ 3 ]
initial
begin
	pixelY[3] = 1'b0;
	pixelY[3] = #60000 1'b1;
	pixelY[3] = #50000 1'b0;
	pixelY[3] = #20000 1'b1;
	pixelY[3] = #40000 1'b0;
	pixelY[3] = #10000 1'b1;
	pixelY[3] = #60000 1'b0;
end 
// pixelY[ 2 ]
initial
begin
	pixelY[2] = 1'b1;
	pixelY[2] = #50000 1'b0;
	pixelY[2] = #80000 1'b1;
	pixelY[2] = #40000 1'b0;
	pixelY[2] = #10000 1'b1;
	pixelY[2] = #60000 1'b0;
	pixelY[2] = #20000 1'b1;
	pixelY[2] = #50000 1'b0;
end 
// pixelY[ 1 ]
initial
begin
	pixelY[1] = 1'b0;
	pixelY[1] = #180000 1'b1;
	pixelY[1] = #60000 1'b0;
	pixelY[1] = #20000 1'b1;
	pixelY[1] = #50000 1'b0;
end 
// pixelY[ 0 ]
initial
begin
	pixelY[0] = 1'b0;
	pixelY[0] = #180000 1'b1;
	pixelY[0] = #60000 1'b0;
	pixelY[0] = #20000 1'b1;
	pixelY[0] = #50000 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b1;
end 
endmodule

