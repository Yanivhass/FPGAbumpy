// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/03/2020 11:45:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          game_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] HitEdgeCode;
reg [1:0] TileType;
reg clk;
reg drawing_request_Ball;
reg drawing_request_Border;
reg drawing_request_Tile;
reg gift_clear;
reg resetN;
reg startOfFrame;
// wires                                               
wire EndGame;
wire Loss;
wire Remove_Gift;
wire SingleHitPulse;
wire collision;
wire [1:0] map;
wire victory;

// assign statements (if any)                          
game_controller i1 (
// port map - connection between master ports and signals/registers   
	.EndGame(EndGame),
	.HitEdgeCode(HitEdgeCode),
	.Loss(Loss),
	.Remove_Gift(Remove_Gift),
	.SingleHitPulse(SingleHitPulse),
	.TileType(TileType),
	.clk(clk),
	.collision(collision),
	.drawing_request_Ball(drawing_request_Ball),
	.drawing_request_Border(drawing_request_Border),
	.drawing_request_Tile(drawing_request_Tile),
	.gift_clear(gift_clear),
	.map(map),
	.resetN(resetN),
	.startOfFrame(startOfFrame),
	.victory(victory)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #60000 1'b1;
end 

// drawing_request_Ball
initial
begin
	drawing_request_Ball = 1'b0;
	drawing_request_Ball = #80000 1'b1;
	drawing_request_Ball = #20000 1'b0;
	drawing_request_Ball = #10000 1'b1;
	drawing_request_Ball = #10000 1'b0;
	drawing_request_Ball = #20000 1'b1;
	drawing_request_Ball = #10000 1'b0;
	drawing_request_Ball = #20000 1'b1;
	drawing_request_Ball = #10000 1'b0;
	drawing_request_Ball = #20000 1'b1;
	drawing_request_Ball = #20000 1'b0;
end 

// drawing_request_Border
initial
begin
	drawing_request_Border = 1'b0;
	drawing_request_Border = #80000 1'b1;
	drawing_request_Border = #10000 1'b0;
	drawing_request_Border = #110000 1'b1;
	drawing_request_Border = #20000 1'b0;
end 
// HitEdgeCode[ 3 ]
initial
begin
	HitEdgeCode[3] = 1'b0;
end 
// HitEdgeCode[ 2 ]
initial
begin
	HitEdgeCode[2] = 1'b0;
end 
// HitEdgeCode[ 1 ]
initial
begin
	HitEdgeCode[1] = 1'b0;
end 
// HitEdgeCode[ 0 ]
initial
begin
	HitEdgeCode[0] = 1'b0;
	HitEdgeCode[0] = #200000 1'b1;
	HitEdgeCode[0] = #20000 1'b0;
end 

// drawing_request_Tile
initial
begin
	drawing_request_Tile = 1'b0;
	drawing_request_Tile = #110000 1'b1;
	drawing_request_Tile = #10000 1'b0;
	drawing_request_Tile = #20000 1'b1;
	drawing_request_Tile = #10000 1'b0;
	drawing_request_Tile = #20000 1'b1;
	drawing_request_Tile = #10000 1'b0;
end 
// TileType[ 1 ]
initial
begin
	TileType[1] = 1'b0;
	TileType[1] = #140000 1'b1;
	TileType[1] = #10000 1'b0;
	TileType[1] = #20000 1'b1;
	TileType[1] = #10000 1'b0;
end 
// TileType[ 0 ]
initial
begin
	TileType[0] = 1'b0;
	TileType[0] = #110000 1'b1;
	TileType[0] = #10000 1'b0;
	TileType[0] = #50000 1'b1;
	TileType[0] = #10000 1'b0;
end 
endmodule

